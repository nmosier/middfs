FUSE
* All FUSE file operations (the ones we implement)
  take only ABSOLUTE PATHS.
  See reference: https://www.cs.cmu.edu/~./fp/courses/15213-s07/
		 lectures/15-filesys/index.html




File I/O Functions with Compatible Prototypes:
(rsrc, mode) open, access, mkdir (all require sending msg to server)
(rsrc, statbuf) lstat,
(rsrc, buf, size) readlink, read, write
(rsrc) unlink


DIAGRAM


SERVER

----------------------------
|server metadata filesystem|
----------------------------


  ___________________________
 /                          /|
/--------------------------/ |
|   server packet handler  | /
----------------------------/
  ^                | outgoing       
  | incoming       | packets
  | packets        v
----------------------------
| server connection handler|
----------------------------



I. Server
   A. Server Metadata Filesystem
   B. Server Packet Handler
   C. Server Connection Handler

II. Client
   A. Client FUSE Filesystem
   B. Client Requester
   C. Client Responder



USEFUL STUFF

htonl(3) -- convert host endianness to network endianness
(also see byteorder(9))

About structuring data sent over the network: https://stackoverflow.com/questions/1577161/passing-a-structure-through-sockets-in-c



Brainstorming

There needs to be a way to associate entries in the socks[] list --
for example, when a server has to make a request to another client,
it needs to associate that with the response.



~~~~~~~~~~~~~~~~

The server needs to maintain a list of clients who are "connected".
Each entry in this list should contain the following information:
 1. Client username.
 2. Client IP.
[3. Client listening port?]
